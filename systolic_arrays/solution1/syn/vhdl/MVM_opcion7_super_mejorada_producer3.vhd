-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MVM_opcion7_super_mejorada_producer3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    aa_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aa_full_n : IN STD_LOGIC;
    aa_write : OUT STD_LOGIC;
    bb1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    bb1_full_n : IN STD_LOGIC;
    bb1_write : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    activacion : IN STD_LOGIC_VECTOR (63 downto 0);
    weight : IN STD_LOGIC_VECTOR (63 downto 0);
    DESTINO : IN STD_LOGIC_VECTOR (31 downto 0);
    ORIGEN : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    DESTINO_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    DESTINO_out_full_n : IN STD_LOGIC;
    DESTINO_out_write : OUT STD_LOGIC;
    ORIGEN_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ORIGEN_out_full_n : IN STD_LOGIC;
    ORIGEN_out_write : OUT STD_LOGIC;
    output_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_out_full_n : IN STD_LOGIC;
    output_out_write : OUT STD_LOGIC );
end;


architecture behav of MVM_opcion7_super_mejorada_producer3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal aa_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln13_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_394_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bb1_blk_n : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln13_reg_394_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln13_reg_394_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal DESTINO_out_blk_n : STD_LOGIC;
    signal ORIGEN_out_blk_n : STD_LOGIC;
    signal output_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_178 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln13_fu_235_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln13_reg_374 : STD_LOGIC_VECTOR (62 downto 0);
    signal ORIGEN_cast_i_i_fu_239_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal ORIGEN_cast_i_i_reg_379 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln11_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_reg_389 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln13_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_394_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_394_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_258_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_1_fu_272_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_1_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_i_i_fu_280_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal i_cast_i_i_reg_409 : STD_LOGIC_VECTOR (62 downto 0);
    signal i_cast_i_i_reg_409_pp0_iter1_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal gmem_addr_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln15_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln13_reg_430 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem_addr_1_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_read_reg_441_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_read_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_182_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_j_phi_fu_193_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_phi_fu_204_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln174_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln174_1_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_225_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln15_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_2_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln174_fu_284_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_302_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln15_mid2_v_v_v_v_fu_312_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_1_fu_319_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_mid2_v_fu_324_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln13_1_fu_334_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln174_1_fu_338_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_219_ce : STD_LOGIC;
    signal grp_fu_302_ce : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_219_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_302_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MVM_opcion7_super_mejorada_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MVM_opcion7_super_mejorada_mul_32ns_32ns_62_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    mul_32ns_32ns_64_2_1_U1 : component MVM_opcion7_super_mejorada_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    mul_32ns_32ns_62_2_1_U2 : component MVM_opcion7_super_mejorada_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_302_p0,
        din1 => grp_fu_302_p1,
        ce => grp_fu_302_ce,
        dout => grp_fu_302_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_200 <= add_ln15_reg_425;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_200 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_178 <= add_ln13_reg_389;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_178 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_189 <= select_ln13_1_reg_403;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_reg_189 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    ORIGEN_cast_i_i_reg_379(31 downto 0) <= ORIGEN_cast_i_i_fu_239_p1(31 downto 0);
                mul_ln11_reg_384 <= grp_fu_219_p2;
                sext_ln13_reg_374 <= sext_ln13_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln13_reg_389 <= add_ln13_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln15_reg_425 <= add_ln15_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem_addr_1_read_reg_446 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln13_reg_394_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem_addr_1_reg_435 <= sext_ln174_1_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_441 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_441_pp0_iter5_reg <= gmem_addr_read_reg_441;
                    i_cast_i_i_reg_409_pp0_iter1_reg(31 downto 0) <= i_cast_i_i_reg_409(31 downto 0);
                icmp_ln13_reg_394 <= icmp_ln13_fu_248_p2;
                icmp_ln13_reg_394_pp0_iter1_reg <= icmp_ln13_reg_394;
                icmp_ln13_reg_394_pp0_iter2_reg <= icmp_ln13_reg_394_pp0_iter1_reg;
                icmp_ln13_reg_394_pp0_iter3_reg <= icmp_ln13_reg_394_pp0_iter2_reg;
                icmp_ln13_reg_394_pp0_iter4_reg <= icmp_ln13_reg_394_pp0_iter3_reg;
                icmp_ln13_reg_394_pp0_iter5_reg <= icmp_ln13_reg_394_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_reg_414 <= sext_ln174_fu_289_p1;
                    i_cast_i_i_reg_409(31 downto 0) <= i_cast_i_i_fu_280_p1(31 downto 0);
                select_ln13_reg_398 <= select_ln13_fu_258_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln13_reg_430 <= grp_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln13_1_reg_403 <= select_ln13_1_fu_272_p3;
            end if;
        end if;
    end process;
    ORIGEN_cast_i_i_reg_379(61 downto 32) <= "000000000000000000000000000000";
    i_cast_i_i_reg_409(62 downto 32) <= "0000000000000000000000000000000";
    i_cast_i_i_reg_409_pp0_iter1_reg(62 downto 32) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, DESTINO_out_full_n, ORIGEN_out_full_n, output_out_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, icmp_ln13_fu_248_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = ORIGEN_out_full_n) or (ap_const_logic_0 = DESTINO_out_full_n) or (ap_done_reg = ap_const_logic_1) or (output_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln13_fu_248_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln13_fu_248_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    DESTINO_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, DESTINO_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            DESTINO_out_blk_n <= DESTINO_out_full_n;
        else 
            DESTINO_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    DESTINO_out_din <= DESTINO;

    DESTINO_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, DESTINO_out_full_n, ORIGEN_out_full_n, output_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = ORIGEN_out_full_n) or (ap_const_logic_0 = DESTINO_out_full_n) or (ap_done_reg = ap_const_logic_1) or (output_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            DESTINO_out_write <= ap_const_logic_1;
        else 
            DESTINO_out_write <= ap_const_logic_0;
        end if; 
    end process;

    ORIGEN_cast_i_i_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ORIGEN),62));

    ORIGEN_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ORIGEN_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ORIGEN_out_blk_n <= ORIGEN_out_full_n;
        else 
            ORIGEN_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ORIGEN_out_din <= ORIGEN;

    ORIGEN_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, DESTINO_out_full_n, ORIGEN_out_full_n, output_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = ORIGEN_out_full_n) or (ap_const_logic_0 = DESTINO_out_full_n) or (ap_done_reg = ap_const_logic_1) or (output_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ORIGEN_out_write <= ap_const_logic_1;
        else 
            ORIGEN_out_write <= ap_const_logic_0;
        end if; 
    end process;


    aa_blk_n_assign_proc : process(aa_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, icmp_ln13_reg_394_pp0_iter5_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            aa_blk_n <= aa_full_n;
        else 
            aa_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aa_din <= gmem_addr_read_reg_441_pp0_iter5_reg;

    aa_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, icmp_ln13_reg_394_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            aa_write <= ap_const_logic_1;
        else 
            aa_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_1_fu_319_p2 <= std_logic_vector(unsigned(sext_ln15_mid2_v_v_v_v_fu_312_p3) + unsigned(weight));
    add_ln13_2_fu_266_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_193_p4) + unsigned(ap_const_lv32_1));
    add_ln13_fu_242_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_182_p4) + unsigned(ap_const_lv64_1));
    add_ln15_fu_307_p2 <= std_logic_vector(unsigned(select_ln13_reg_398) + unsigned(ap_const_lv32_1));
    add_ln174_1_fu_338_p2 <= std_logic_vector(signed(sext_ln13_1_fu_334_p1) + signed(i_cast_i_i_reg_409_pp0_iter1_reg));
    add_ln174_fu_284_p2 <= std_logic_vector(signed(sext_ln13_reg_374) + signed(i_cast_i_i_fu_280_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(aa_full_n, bb1_full_n, m_axi_gmem_RVALID, ap_enable_reg_pp0_iter6, icmp_ln13_reg_394_pp0_iter5_reg, ap_enable_reg_pp0_iter4, icmp_ln13_reg_394_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((bb1_full_n = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = aa_full_n) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(aa_full_n, bb1_full_n, m_axi_gmem_RVALID, ap_enable_reg_pp0_iter6, icmp_ln13_reg_394_pp0_iter5_reg, ap_enable_reg_pp0_iter4, icmp_ln13_reg_394_pp0_iter3_reg, ap_enable_reg_pp0_iter2, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((bb1_full_n = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = aa_full_n) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(aa_full_n, bb1_full_n, m_axi_gmem_RVALID, ap_enable_reg_pp0_iter6, icmp_ln13_reg_394_pp0_iter5_reg, ap_enable_reg_pp0_iter4, icmp_ln13_reg_394_pp0_iter3_reg, ap_enable_reg_pp0_iter2, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((bb1_full_n = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = aa_full_n) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_gmem_RVALID, icmp_ln13_reg_394_pp0_iter5_reg, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_block_state4_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_gmem_RVALID, icmp_ln13_reg_394_pp0_iter5_reg, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_block_state4_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, DESTINO_out_full_n, ORIGEN_out_full_n, output_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ORIGEN_out_full_n) or (ap_const_logic_0 = DESTINO_out_full_n) or (ap_done_reg = ap_const_logic_1) or (output_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter4_assign_proc : process(m_axi_gmem_RVALID, icmp_ln13_reg_394_pp0_iter3_reg)
    begin
                ap_block_state11_pp0_stage0_iter4 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage1_iter5_assign_proc : process(m_axi_gmem_RVALID, icmp_ln13_reg_394_pp0_iter5_reg)
    begin
                ap_block_state14_pp0_stage1_iter5 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0));
    end process;


    ap_block_state15_pp0_stage0_iter6_assign_proc : process(aa_full_n, bb1_full_n, icmp_ln13_reg_394_pp0_iter5_reg)
    begin
                ap_block_state15_pp0_stage0_iter6 <= (((bb1_full_n = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = aa_full_n) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln13_reg_394)
    begin
                ap_block_state4_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln13_reg_394 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln13_reg_394_pp0_iter1_reg)
    begin
                ap_block_state7_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln13_reg_394_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln13_fu_248_p2)
    begin
        if ((icmp_ln13_fu_248_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_204_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln13_reg_394, i_reg_200, add_ln15_reg_425, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_204_p4 <= add_ln15_reg_425;
        else 
            ap_phi_mux_i_phi_fu_204_p4 <= i_reg_200;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_182_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln13_reg_394, indvar_flatten_reg_178, add_ln13_reg_389, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_182_p4 <= add_ln13_reg_389;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_182_p4 <= indvar_flatten_reg_178;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_193_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln13_reg_394, j_reg_189, select_ln13_1_reg_403, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_193_p4 <= select_ln13_1_reg_403;
        else 
            ap_phi_mux_j_phi_fu_193_p4 <= j_reg_189;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    bb1_blk_n_assign_proc : process(bb1_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, icmp_ln13_reg_394_pp0_iter5_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            bb1_blk_n <= bb1_full_n;
        else 
            bb1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bb1_din <= gmem_addr_1_read_reg_446;

    bb1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, icmp_ln13_reg_394_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            bb1_write <= ap_const_logic_1;
        else 
            bb1_write <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln13_reg_394, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, icmp_ln13_reg_394_pp0_iter1_reg)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln13_reg_394_pp0_iter5_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter4, icmp_ln13_reg_394_pp0_iter3_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_219_ce_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, DESTINO_out_full_n, ORIGEN_out_full_n, output_out_full_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_const_logic_0 = ORIGEN_out_full_n) or (ap_const_logic_0 = DESTINO_out_full_n) or (ap_done_reg = ap_const_logic_1) or (output_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_219_ce <= ap_const_logic_1;
        else 
            grp_fu_219_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_219_p0 <= grp_fu_219_p00(32 - 1 downto 0);
    grp_fu_219_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DESTINO),64));
    grp_fu_219_p1 <= grp_fu_219_p10(32 - 1 downto 0);
    grp_fu_219_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ORIGEN),64));

    grp_fu_302_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_302_ce <= ap_const_logic_1;
        else 
            grp_fu_302_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_302_p0 <= ORIGEN_cast_i_i_reg_379(32 - 1 downto 0);
    grp_fu_302_p1 <= grp_fu_302_p10(32 - 1 downto 0);
    grp_fu_302_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_reg_403),62));
    i_cast_i_i_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_fu_258_p3),63));
    icmp_ln13_fu_248_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_182_p4 = mul_ln11_reg_384) else "0";
    icmp_ln15_fu_253_p2 <= "1" when (ap_phi_mux_i_phi_fu_204_p4 = ORIGEN) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln13_reg_394, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln13_reg_394_pp0_iter1_reg, ap_block_pp0_stage0_11001, gmem_addr_reg_414, ap_block_pp0_stage1_11001, gmem_addr_1_reg_435)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_1_reg_435;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_414;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln13_reg_394, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln13_reg_394_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_reg_394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln13_reg_394_pp0_iter5_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, icmp_ln13_reg_394_pp0_iter3_reg, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln13_reg_394_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_394_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;

    output_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, output_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_out_blk_n <= output_out_full_n;
        else 
            output_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_out_din <= output_r;

    output_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, DESTINO_out_full_n, ORIGEN_out_full_n, output_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = ORIGEN_out_full_n) or (ap_const_logic_0 = DESTINO_out_full_n) or (ap_done_reg = ap_const_logic_1) or (output_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_out_write <= ap_const_logic_1;
        else 
            output_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln13_1_fu_272_p3 <= 
        add_ln13_2_fu_266_p2 when (icmp_ln15_fu_253_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_193_p4;
    select_ln13_fu_258_p3 <= 
        ap_const_lv32_0 when (icmp_ln15_fu_253_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_204_p4;
        sext_ln13_1_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln15_mid2_v_fu_324_p4),63));

        sext_ln13_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_225_p4),63));

    sext_ln15_mid2_v_fu_324_p4 <= add_ln13_1_fu_319_p2(63 downto 2);
    sext_ln15_mid2_v_v_v_v_fu_312_p3 <= (mul_ln13_reg_430 & ap_const_lv2_0);
        sext_ln174_1_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln174_1_fu_338_p2),64));

        sext_ln174_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln174_fu_284_p2),64));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_fu_225_p4 <= activacion(63 downto 2);
end behav;
